// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let diagnosedTeeth = 0;
let cleanPercentage = 0;
let isListening = false;
let recognition;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!');
    initToothCleaning();
    setupVoiceRecognition();
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function nextScreen(screenNumber) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É:', screenNumber);
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(`screen${screenNumber}`);
    if (targetScreen) {
        targetScreen.classList.add('active');
    } else {
        console.error('–≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenNumber);
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgressIndicator(screenNumber);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö
    window.scrollTo(0, 0);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgressIndicator(currentStep) {
    document.querySelectorAll('.step').forEach(step => {
        step.classList.remove('active');
        if (parseInt(step.dataset.step) <= currentStep) {
            step.classList.add('active');
        }
    });
}

// –≠–∫—Ä–∞–Ω 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑—É–±–æ–≤
function diagnoseTooth(element) {
    if (!element.classList.contains('checked')) {
        element.classList.add('checked');
        diagnosedTeeth++;
        
        const messages = [
            "–û—Ç–ª–∏—á–Ω–∞—è —É–ª—ã–±–∫–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–º–æ—Ç—Ä!",
            "–≠—Ç–æ—Ç –∑—É–± –ø—Ä–æ—Å—Ç–æ —Å–∏—è–µ—Ç –æ—Ç —Å—á–∞—Å—Ç—å—è!",
            "–ò–¥–µ–∞–ª—å–Ω–∞—è —É–ª—ã–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!",
            "–ó—É–± –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–¥–∞—á–∏!",
            "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—Å–µ –∑—É–±—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã!"
        ];
        
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        document.getElementById('diagnosisMessage').textContent = randomMessage;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑—É–±–∞
        element.style.transform = 'scale(1.3)';
        setTimeout(() => {
            element.style.transform = 'scale(1.1)';
        }, 300);
        
        // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∑—É–±–æ–≤
        if (diagnosedTeeth >= 5) {
            document.getElementById('btnScreen2').disabled = false;
            document.getElementById('diagnosisMessage').textContent = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –∑—É–±—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –∑–¥–æ—Ä–æ–≤—ã –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã!";
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å—Ç–∫–∏ –∑—É–±–æ–≤
function initToothCleaning() {
    const canvas = document.getElementById('toothCanvas');
    const ctx = canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
    function setCanvasSize() {
        const container = canvas.parentElement;
        const width = container.clientWidth - 40; // –º–∏–Ω—É—Å padding
        const height = 200;
        
        canvas.width = width;
        canvas.height = height;
        drawTooth();
    }
    
    // –†–∏—Å—É–µ–º –∑—É–±
    function drawTooth() {
        const width = canvas.width;
        const height = canvas.height;
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, width, height);
        
        // –§–æ–Ω –∑—É–±–∞
        ctx.fillStyle = '#FFF8E1';
        ctx.fillRect(0, 0, width, height);
        
        // "–ì—Ä—è–∑—å" –Ω–∞ –∑—É–±–µ
        if (cleanPercentage < 100) {
            const dirtIntensity = 1 - (cleanPercentage / 100);
            
            // –ñ–µ–ª—Ç—ã–µ –ø—è—Ç–Ω–∞
            ctx.fillStyle = `rgba(210, 180, 140, ${0.4 * dirtIntensity})`;
            for (let i = 0; i < 10 * dirtIntensity; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const size = 15 + Math.random() * 25;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // –¢–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞
            ctx.fillStyle = `rgba(139, 69, 19, ${0.3 * dirtIntensity})`;
            for (let i = 0; i < 8 * dirtIntensity; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const size = 5 + Math.random() * 10;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        // –ë–ª–µ—Å–∫
        if (cleanPercentage > 0) {
            const shineIntensity = cleanPercentage / 100;
            ctx.fillStyle = `rgba(255, 255, 255, ${0.7 * shineIntensity})`;
            
            for (let i = 0; i < 15 * shineIntensity; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const size = 2 + Math.random() * 4;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        // –ö–æ–Ω—Ç—É—Ä
        ctx.strokeStyle = '#FFD54F';
        ctx.lineWidth = 2;
        ctx.strokeRect(0, 0, width, height);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏
    function cleanArea(x, y) {
        if (cleanPercentage >= 100) return;
        
        const rect = canvas.getBoundingClientRect();
        const canvasX = x - rect.left;
        const canvasY = y - rect.top;
        
        // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å
        const brushSize = 30;
        ctx.clearRect(canvasX - brushSize/2, canvasY - brushSize/2, brushSize, brushSize);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        cleanPercentage = Math.min(100, cleanPercentage + 0.8);
        updateCleaningProgress();
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–µ—Å–∫
        if (cleanPercentage > 30) {
            ctx.fillStyle = `rgba(255, 255, 255, 0.8)`;
            ctx.beginPath();
            ctx.arc(canvasX, canvasY, 10, 0, Math.PI * 2);
            ctx.fill();
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º—ã—à–∏
    let isMouseDown = false;
    
    canvas.addEventListener('mousedown', function(e) {
        isMouseDown = true;
        cleanArea(e.clientX, e.clientY);
    });
    
    canvas.addEventListener('mousemove', function(e) {
        if (isMouseDown) {
            cleanArea(e.clientX, e.clientY);
        }
    });
    
    canvas.addEventListener('mouseup', function() {
        isMouseDown = false;
    });
    
    canvas.addEventListener('mouseleave', function() {
        isMouseDown = false;
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è touch-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
    canvas.addEventListener('touchstart', function(e) {
        e.preventDefault();
        const touch = e.touches[0];
        cleanArea(touch.clientX, touch.clientY);
    });
    
    canvas.addEventListener('touchmove', function(e) {
        e.preventDefault();
        const touch = e.touches[0];
        cleanArea(touch.clientX, touch.clientY);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    setCanvasSize();
    window.addEventListener('resize', setCanvasSize);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–∏—Å—Ç–∫–∏
function updateCleaningProgress() {
    const progressBar = document.getElementById('cleanProgress');
    const progressText = document.getElementById('progressText');
    const cleanStatus = document.getElementById('cleanStatus');
    const nextButton = document.getElementById('btnScreen3');
    
    progressBar.style.width = cleanPercentage + '%';
    progressText.textContent = Math.round(cleanPercentage) + '%';
    
    if (cleanPercentage >= 100) {
        cleanStatus.textContent = "üéâ –ò–¥–µ–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–æ—Ç–∞! –ó—É–± —Å–∏—è–µ—Ç –∫–∞–∫ –Ω–æ–≤–µ–Ω—å–∫–∏–π! ‚ú®";
        cleanStatus.style.color = '#4CAF50';
        cleanStatus.style.fontWeight = 'bold';
        nextButton.disabled = false;
    } else if (cleanPercentage > 80) {
        cleanStatus.textContent = "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ï—â—ë —á—É—Ç—å-—á—É—Ç—å! üí´";
    } else if (cleanPercentage > 60) {
        cleanStatus.textContent = "–û—Ç–ª–∏—á–Ω–æ! –ó—É–± —É–∂–µ –±–ª–µ—Å—Ç–∏—Ç! üåü";
    } else if (cleanPercentage > 40) {
        cleanStatus.textContent = "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëç";
    } else if (cleanPercentage > 20) {
        cleanStatus.textContent = "–ù–∞—á–∏–Ω–∞–µ—Ç –±–ª–µ—Å—Ç–µ—Ç—å! –í–∏–¥–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å! ‚ú®";
    } else if (cleanPercentage > 5) {
        cleanStatus.textContent = "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–∏—Å—Ç–∫—É! ü™•";
    }
}

// –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
function setupVoiceRecognition() {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'ru-RU';
        
        recognition.onstart = function() {
            isListening = true;
            document.getElementById('voiceIcon').classList.add('listening');
            document.getElementById('voiceStatus').textContent = "üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ '–ü–û–î–ê–†–û–ö'!";
            document.getElementById('voiceButton').textContent = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ";
            document.getElementById('voiceButton').style.background = 'linear-gradient(45deg, #f44336, #FF9800)';
        };
        
        recognition.onresult = function(event) {
            const speechResult = event.results[0][0].transcript.toUpperCase();
            document.getElementById('voiceStatus').textContent = `–í—ã —Å–∫–∞–∑–∞–ª–∏: "${speechResult}"`;
            
            if (speechResult.includes('–ü–û–î–ê–†–û–ö')) {
                handleSuccessfulUnlock();
            } else {
                document.getElementById('voiceStatus').textContent = `–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –í—ã —Å–∫–∞–∑–∞–ª–∏: "${speechResult}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`;
                setTimeout(() => {
                    if (isListening) {
                        recognition.start();
                    }
                }, 2000);
            }
        };
        
        recognition.onerror = function(event) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
            document.getElementById('voiceStatus').textContent = "–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.";
            resetVoiceButton();
        };
        
        recognition.onend = function() {
            resetVoiceButton();
        };
    } else {
        document.getElementById('voiceStatus').textContent = "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.";
        document.getElementById('voiceButton').disabled = true;
    }
}

function resetVoiceButton() {
    isListening = false;
    document.getElementById('voiceIcon').classList.remove('listening');
    document.getElementById('voiceButton').textContent = "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω";
    document.getElementById('voiceButton').style.background = 'linear-gradient(45deg, #2196F3, #21CBF3)';
}

function toggleVoiceInstructions() {
    const instructions = document.getElementById('voiceInstructions');
    instructions.classList.toggle('hidden');
}

function startVoiceRecognition() {
    if (!recognition) {
        document.getElementById('voiceStatus').textContent = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ";
        return;
    }
    
    if (!isListening) {
        try {
            recognition.start();
        } catch (error) {
            document.getElementById('voiceStatus').textContent = "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.";
        }
    } else {
        recognition.stop();
    }
}

// –†—É—á–Ω–æ–π –≤–≤–æ–¥
function openGiftWithCode() {
    const manualInput = document.getElementById('manualInput');
    const voiceControls = document.querySelector('.voice-controls');
    
    manualInput.classList.remove('hidden');
    voiceControls.classList.add('hidden');
    document.getElementById('codeInput').focus();
}

function checkManualCode() {
    const input = document.getElementById('codeInput');
    const code = input.value.toUpperCase().trim();
    
    if (code === '–ü–û–î–ê–†–û–ö') {
        input.classList.add('correct');
        document.getElementById('voiceStatus').textContent = "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–¥–∞—Ä–æ–∫!";
        setTimeout(openGift, 1000);
    } else {
        input.style.borderColor = '#f44336';
        document.getElementById('voiceStatus').textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!";
        setTimeout(() => {
            input.style.borderColor = '#e0e0e0';
            input.focus();
        }, 2000);
    }
}

function handleSuccessfulUnlock() {
    document.getElementById('voiceStatus').textContent = "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–¥–∞—Ä–æ–∫! üéâ";
    document.getElementById('voiceIcon').classList.remove('listening');
    document.getElementById('voiceIcon').textContent = "‚úÖ";
    setTimeout(openGift, 1500);
}

function openGift() {
    document.getElementById('giftContent').classList.remove('hidden');
    document.getElementById('voiceInstructions').classList.add('hidden');
    createFireworks();
}

// –§–µ–π–µ—Ä–≤–µ—Ä–∫–∏
function createFireworks() {
    const container = document.getElementById('fireworksContainer');
    container.innerHTML = '';
    
    for (let i = 0; i < 15; i++) {
        setTimeout(() => {
            const firework = document.createElement('div');
            firework.className = 'firework';
            firework.style.left = Math.random() * 100 + '%';
            firework.style.top = Math.random() * 100 + '%';
            firework.style.background = getRandomColor();
            firework.style.setProperty('--x', (Math.random() - 0.5) * 200 + 'px');
            firework.style.setProperty('--y', (Math.random() - 0.5) * 200 + 'px');
            container.appendChild(firework);
            
            setTimeout(() => {
                firework.remove();
            }, 2000);
        }, i * 200);
    }
}

function getRandomColor() {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ff8000', '#8000ff'];
    return colors[Math.floor(Math.random() * colors.length)];
}